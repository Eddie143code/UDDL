/*
 * generated by Xtext 2.28.0
 */
package com.epistimis.uddl.validation;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.eclipse.emf.common.util.URI;
import org.eclipse.ocl.xtext.completeocl.validation.CompleteOCLEObjectValidator;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.validation.CheckType;
import org.eclipse.xtext.validation.EValidatorRegistrar;

import com.epistimis.uddl.CLPExtractors;
import com.epistimis.uddl.uddl.ConceptualCharacteristic;
import com.epistimis.uddl.uddl.ConceptualEntity;
import com.epistimis.uddl.uddl.LogicalEntity;
import com.epistimis.uddl.uddl.PlatformEntity;
import com.epistimis.uddl.uddl.UddlElement;
import com.epistimis.uddl.uddl.UddlPackage;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class UddlValidator extends AbstractUddlValidator {
	
	protected static String ISSUE_CODE_PREFIX = "com.epistimis.uddl.";
	public static String ENTITY_NEEDS_2_ELEMENTS = ISSUE_CODE_PREFIX + "EntityNeeds2Elements";
	
	private void loadAndRegister(EValidatorRegistrar registrar, String resourceAddress) {
		/**
		 * NOTE: AbstractInjectableValidator::register registers validators for the entire inheritance 
		 * hierarchy. This does not do that for the following reason:
		 * Each OCL file is for a specific package, so registering it for other packages doesn't make any sense.
		 * If there is a need, manually re-register the OCL file for multiple packages.
		 */
	       UddlPackage ePackage = UddlPackage.eINSTANCE;
	        URI oclURI = URI.createPlatformResourceURI(
	        		resourceAddress, true);
	        registrar.register(ePackage,
	            new CompleteOCLEObjectValidator(ePackage, oclURI));
	}
    @Override
    public void register(EValidatorRegistrar registrar) {
        super.register(registrar);
//        loadAndRegister(registrar,"/com.epistimis.uddl/src/com/epistimis/uddl/constraints/uddl.ocl");
//        loadAndRegister(registrar,"/com.epistimis.uddl/src/com/epistimis/uddl/constraints/datamodel.ocl");
//        loadAndRegister(registrar,"/com.epistimis.uddl/src/com/epistimis/uddl/constraints/conceptual.ocl");
//        loadAndRegister(registrar,"/com.epistimis.uddl/src/com/epistimis/uddl/constraints/logical.ocl");
//        loadAndRegister(registrar,"/com.epistimis.uddl/src/com/epistimis/uddl/constraints/platform.ocl");
        loadAndRegister(registrar,"/com.epistimis.uddl/src/com/epistimis/uddl/constraints/specialCategoriesOfData.ocl");
//        loadAndRegister(registrar,"/com.epistimis.uddl/src/com/epistimis/uddl/constraints/logicalExtensions.ocl");
    }
    
	
	/**
	 * Structures must have more than 1 member - but they can be inherited - so check entire specialization hierarchy
	 * for:
	 * (C/L/P)Entity
	 * TODO: Actually, since participants are for Associations, there must be at least 2 Participants also
	 * Also -must check both composition and participant lists - The net across all of them must be at least 2
	 */
	
	@SuppressWarnings("unchecked")
	private static <Entity extends UddlElement, 
					Characteristic, 
					Association extends Entity,
					Participant extends Characteristic> 
	List<Characteristic> 	getEntityCharacteristics(Entity ent){
		
		List<Characteristic> results = new ArrayList<>();
		if (CLPExtractors.getSpecializes(ent) != null) {
			// If this specializes, then recursively get everything from what it specializes
			Entity ce = (Entity)ent;
			results.addAll(getEntityCharacteristics(ce));
		}
		/**
		 * Now check mine
		 */
		results.addAll((Collection<? extends Characteristic>) CLPExtractors.getComposition(ent));
		if (CLPExtractors.isAssociation(ent)) {
			Association ca =(Association) CLPExtractors.conv2Association(ent);
			results.addAll((Collection<? extends Characteristic>) CLPExtractors.getParticipant(ca));
		}
		return results;	
	}
	
	@Check(CheckType.EXPENSIVE)
	public void checkCharacteristicCount(ConceptualEntity ent) {
		List<ConceptualCharacteristic> chars = getEntityCharacteristics(ent);
		if (chars.size() < 2) {
			error("Entity '" + ent.getName() + "' should have at least 2 characteristics",
					UddlPackage.eINSTANCE.getConceptualEntity_Composition(),
					ENTITY_NEEDS_2_ELEMENTS, ent.getName());
		}	
	}
	@Check(CheckType.EXPENSIVE)
	public void checkCharacteristicCount(LogicalEntity ent) {
		List<ConceptualCharacteristic> chars = getEntityCharacteristics(ent);
		if (chars.size() < 2) {
			error("Entity '" + ent.getName() + "' should have at least 2 characteristics",
					UddlPackage.eINSTANCE.getLogicalEntity_Composition(),
					ENTITY_NEEDS_2_ELEMENTS, ent.getName());
		}	
	}
	@Check(CheckType.EXPENSIVE)
	public void checkCharacteristicCount(PlatformEntity ent) {
		List<ConceptualCharacteristic> chars = getEntityCharacteristics(ent);
		if (chars.size() < 2) {
			error("Entity '" + ent.getName() + "' should have at least 2 characteristics",
					UddlPackage.eINSTANCE.getPlatformEntity_Composition(),
					ENTITY_NEEDS_2_ELEMENTS, ent.getName());
		}	
	}
}
