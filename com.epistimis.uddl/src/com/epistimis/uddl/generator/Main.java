/*
 * generated by Xtext 2.28.0
 */
package com.epistimis.uddl.generator;

import com.epistimis.uddl.UddlStandaloneSetup;
import com.google.inject.Inject;
import com.google.inject.Injector;
import com.google.inject.Provider;
import java.util.List;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.xtext.generator.GeneratorContext;
import org.eclipse.xtext.generator.GeneratorDelegate;
import org.eclipse.xtext.generator.JavaIoFileSystemAccess;
import org.eclipse.xtext.util.CancelIndicator;
import org.eclipse.xtext.validation.CheckMode;
import org.eclipse.xtext.validation.IResourceValidator;
import org.eclipse.xtext.validation.Issue;

public class Main {

	public static void main(String[] args) {
		if (args.length == 0) {
			System.err.println("Aborting: no path to EMF resource provided!");
			return;
		}
		Injector injector = new UddlStandaloneSetup().createInjectorAndDoEMFRegistration();

		Injector queryInjector = new UddlStandaloneSetup().createInjectorAndDoEMFRegistration();
		Main main = injector.getInstance(Main.class);
		main.runGenerator(args);
	}

	@Inject
	private Provider<ResourceSet> resourceSetProvider;

	@Inject
	private IResourceValidator validator;

	@Inject
	private GeneratorDelegate generator;

	@Inject 
	private JavaIoFileSystemAccess fileAccess;

	protected void runGenerator(String[] args) {
		// For all specified files, load them
		ResourceSet set = resourceSetProvider.get();
		for (String arg: args) {
			// Load the resource
			Resource resource = set.getResource(URI.createFileURI(arg), true);
		}

		/**
		 * Validate the resources - since validation depends on resolving cross references, do that first
		 * This should? do most of the work when resolving the first resource - it shouldn't repeat work?
		 */
		for (Resource resource: set.getResources()) {
			EcoreUtil.resolveAll(resource);
			List<Issue> list = validator.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl);
			if (!list.isEmpty()) {
				for (Issue issue : list) {
					System.err.println(issue);
				}
				return;
			}
		}
		/**
		 * Generate for the first resource only - the others were just there to resolve references
		 */
		URI uri = URI.createURI(args[0]);
		Resource res2Gen = set.getResource(uri, false);
		// Configure and start the generator
		fileAccess.setOutputPath("src-gen/");
		GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);
		generator.generate(res2Gen, fileAccess, context);

		System.out.println("Code generation finished.");
	}
}
