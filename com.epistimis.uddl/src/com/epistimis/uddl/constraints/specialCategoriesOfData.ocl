import  '../../../../../model/generated/Uddl.ecore'

    /*
     * Implements checking for Special Categories of Data.
     * as of 2022-12-24, this has a simple rule that just checks to see if any observables of the specified names are used.
     * 
     * TODO: We really only care about the ones that are realized. There may be ones that are in the ConceptualEntity that aren't realized by 
     * the time we get to the Platform level. Clean this up to check only that.
     * 
     * TODO: The invariant here simply checks for usage. The invariant really needs to check a DataUsageRequest to see the purpose. Should also check 
     * for jurisdiction specifics and possibly other conditions.
     * 
     * See https://ico.org.uk/for-organisations/guide-to-data-protection/guide-to-the-general-data-protection-regulation-gdpr/lawful-basis-for-processing/special-category-data/
     */

package uddl

  context UddlElement
  
   /**
	 * Declare a helper operation to map an ok/warning verdict to ok/error.
	 */
	def: asError(verdict : Boolean) : Boolean = if verdict then true else null endif
  

  context ConceptualComposableElement
    /*
     * Helper method that determines if a ConceptualComposableElement processes an SCD
     */
    def: processesSpecialCategoryOfData() : Boolean =
      if self.oclIsTypeOf(ConceptualObservable) then
        self.oclAsType(ConceptualObservable).processesSpecialCategoryOfData()
      else -- ConceptualParticipantPathNode
        self.oclAsType(ConceptualEntity).processesSpecialCategoryOfData()
      endif
  

  context ConceptualObservable
    /*
     * Helper method that determines if an Observable is a SpecialCategory of Data
     * See https://ico.org.uk/for-organisations/guide-to-data-protection/guide-to-the-general-data-protection-regulation-gdpr/lawful-basis-for-processing/special-category-data/
     */
    def: processesSpecialCategoryOfData() : Boolean =
      let strLower: String = self.name.toLowerCase() in
        strLower = 'health' or
        strLower = 'ethnicity' or
        strLower = 'race' or
        strLower = 'religion' or
        strLower = 'philosophy' or	
        strLower = 'politics' or
        strLower = 'union' or
        strLower = 'genetic' or
        strLower = 'biometric' or
        strLower = 'sexual_activity' or
        strLower = 'sexual_orientation'
  
  context ConceptualEntity
    /*
     * Helper method that determines if an ConceptualEntity includes an SCD
     */
    def: processesSpecialCategoryOfData() : Boolean =
		let specialProcessed = self.composition->collect(type.processesSpecialCategoryOfData()) in
		 specialProcessed->includes(true)
  
  context ConceptualComposition
    /*
      * Helper method that determines if a ConceptualComposition uses an SCD
     */
    def: processesSpecialCategoryOfData() : Boolean =
      if self.type = null then
        false
      else -- 
        self.type.processesSpecialCategoryOfData()
      endif
  
  context ConceptualParticipant
    /*
     * Helper method that determines if a ConceptualParticipant uses an SCD
     */
    def: processesSpecialCategoryOfData() : Boolean =
      if self.type = null then
        false
      else -- 
        self.type.processesSpecialCategoryOfData()
      endif

 
   context ConceptualAssociation
    /* 
     * Helper method that determines if an ConceptualAssociation includes an SCD
     */
    def: processesSpecialCategoryOfData() : Boolean =
		let specialCompProcessed = self.composition->collect(type.processesSpecialCategoryOfData()),
			specialPartProcessed = self.participant->collect(type.processesSpecialCategoryOfData())
		 in
		 specialCompProcessed->includes(true) or specialPartProcessed->includes(true)
    
  context LogicalComposableElement
    /*
     * Helper method that determines if a LogicalComposableElement realizes an SCD
     */
    def: processesSpecialCategoryOfData() : Boolean =
      if self.oclIsTypeOf(LogicalMeasurement) then
        self.oclAsType(LogicalMeasurement).processesSpecialCategoryOfData()
      else -- ConceptualParticipantPathNode
        self.oclAsType(LogicalEntity).processesSpecialCategoryOfData()
      endif

		  
  context LogicalEntity
    /*
     * Helper method that determines if a LogicalEntity realizes an SCD
     */
    def: processesSpecialCategoryOfData() : Boolean =
		let specialProcessed = self.composition->collect(realizes.processesSpecialCategoryOfData()) in
		 specialProcessed->includes(true)

 		
   context LogicalComposition
    /*
     * Helper method that determines if a LogicalComposition realizes an SCD
     */
    def: processesSpecialCategoryOfData() : Boolean =
      if self.realizes = null then
        self.type.processesSpecialCategoryOfData()
      else -- 
        self.realizes.processesSpecialCategoryOfData()
      endif

   context LogicalParticipant
    /*
     * Helper method that determines if a LogicalParticipant uses an SCD
     */
    def: processesSpecialCategoryOfData() : Boolean =
      if self.realizes = null then
        self.type.processesSpecialCategoryOfData()
      else -- 
        self.realizes.processesSpecialCategoryOfData()
      endif
 
   context LogicalAssociation
    /*
     * Helper method that determines if an LogicalAssociation includes an SCD
     */
    def: processesSpecialCategoryOfData() : Boolean =
		let specialCompProcessed = self.composition->collect(type.processesSpecialCategoryOfData()),
			specialPartProcessed = self.participant->collect(type.processesSpecialCategoryOfData())
		 in
		 specialCompProcessed->includes(true) or specialPartProcessed->includes(true)
 
    context LogicalMeasurement
	    /*
	     * Helper method that determines if a LogicalMeasurement realizes an SCD
	     */
	    def: processesSpecialCategoryOfData() : Boolean =
	      if self.realizes = null then
	        false
	      else -- 
	        self.realizes.processesSpecialCategoryOfData()
	      endif
	 
     context LogicalMeasurementAxis
	    /*
	     * Helper method that determines if a LogicalMeasurementAxis realizes an SCD
	     */
	    def: processesSpecialCategoryOfData() : Boolean =
	      if self.realizes = null then
	        false
	      else -- 
	        self.realizes.processesSpecialCategoryOfData()
	      endif

     context PlatformComposableElement
	    /*
	     * Helper method that determines if a PlatformComposableElement realizes an SCD
	     */
	    def: processesSpecialCategoryOfData() : Boolean =
	      if self.oclIsTypeOf(PlatformDataType) then
	        self.oclAsType(PlatformDataType).processesSpecialCategoryOfData()
	      else -- 
	        self.oclAsType(PlatformEntity).processesSpecialCategoryOfData()
	      endif
  
   context PlatformComposition
	    /*
	     * Helper method that determines if a PlatformComposition realizes an SCD
	     */
	    def: processesSpecialCategoryOfData() : Boolean =
	      if self.realizes = null then
	        self.type.processesSpecialCategoryOfData()
	      else -- 
	        self.realizes.processesSpecialCategoryOfData()
	      endif
 
    context PlatformDataType
	    /*
	     * Helper method that determines if a PlatformDataType realizes an SCD
	     */
	    def: processesSpecialCategoryOfData() : Boolean =
	      if self.realizes = null then
	        false
	      else -- 
	        if self.realizes.oclIsTypeOf(LogicalMeasurement) then
	        	self.realizes.oclAsType(LogicalMeasurement).processesSpecialCategoryOfData()
	        elseif self.realizes.oclIsTypeOf(LogicalMeasurementAxis) then
	        	self.realizes.oclAsType(LogicalMeasurementAxis).processesSpecialCategoryOfData()
	        else 
	        	false
	        endif
	      endif
     
    context PlatformEntity
	    /*
	     * Helper method that determines if a PlatformEntity realizes an SCD
	     */
	    def: processesSpecialCategoryOfData() : Boolean =
			let specialProcessed = self.composition->collect(realizes.processesSpecialCategoryOfData()) in
			 specialProcessed->includes(true)
 
		inv noSpecialCategoryDataUsed('PlatformEntity '+ self.name + ' uses a Special Category of Data. Remove that usage to continue'): 
			 asError(not self.processesSpecialCategoryOfData()) 



   context PlatformParticipant
    /*
     * Helper method that determines if a PlatformParticipant uses an SCD
     */
    def: processesSpecialCategoryOfData() : Boolean =
      if self.realizes = null then
        self.type.processesSpecialCategoryOfData()
      else -- 
        self.realizes.processesSpecialCategoryOfData()
      endif
 
   context PlatformAssociation
    /*
     * Helper method that determines if an PlatformAssociation includes an SCD
     */
    def: processesSpecialCategoryOfData() : Boolean =
		let specialCompProcessed = self.composition->collect(type.processesSpecialCategoryOfData()),
			specialPartProcessed = self.participant->collect(type.processesSpecialCategoryOfData())
		 in
		 specialCompProcessed->includes(true) or specialPartProcessed->includes(true)

		inv noSpecialCategoryDataUsed('PlatformAssociation '+ self.name + ' uses a Special Category of Data. Remove that usage to continue'): 
			 asError(not self.processesSpecialCategoryOfData()) 
			   
endpackage
